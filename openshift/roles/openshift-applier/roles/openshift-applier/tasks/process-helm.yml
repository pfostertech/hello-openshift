---

- name: "Reset Command Line Options"
  set_fact:
    helm_set_option: ''

- name: "Pre-process helm chart (if applicable)"
  block:
    - name: "Check whether helm folder exists"
      stat:
        path: "{{ helm_chart }}"
      ignore_errors: true
      register: helm_chart_result
      delegate_to: localhost
    - name: "Fail when helm folder does not exist"
      fail:
        msg: "{{ helm_chart }} - Helm Chart is not a directory"
      when:
        - helm_chart_result.stat.isdir == False
  when:
    - helm_chart|trim != ''

- name: "Pre-process helm values (if applicable)"
  block:
    - name: "Check whether helm values file exists"
      stat:
        path: "{{ helm_values_file }}"
      ignore_errors: true
      register: helm_values_file_result
      delegate_to: localhost
    - name: "Fail when helm values file does not exist"
      fail:
        msg: "{{ helm_values_file }} - Helm values file doesn't exist."
      when:
        - helm_values_file_result.stat.exists == False
  when:
    - helm_values_file|trim != ''

# CAN'T DO COLLECTIONS, SO BLOCKED: https://github.com/helm/helm/issues/5618
# WORKAROUND: https://github.com/helm/helm/issues/1987#issuecomment-324341396
# will need to be output and iterated through in either dot format for every single value in mapping
# IF LIST will also need to use an index for every single value
# - name: "Change 'helm_values' fact (if applicable) into command line parameters"
#   set_fact:
#     helm_set_option: "{{ helm_set_option }} --set='{{ item.key }}={{ item.value }}'"
#   with_dict: "{{ helm_values }}"

- name: "{{ oc_action | capitalize }} OpenShift objects based on helm template for '{{ entry.object }} : {{ content.name | default(helm | basename) }}'"
  shell: >
    helm template \
       {{ helm_chart }} \
       {{ helm_set_option }} \
       {{ (helm_values_file|trim == '') | ternary('', ' -f="' + helm_values_file + '"') }} \
       {{ helm_flags }} \
       | \
    {{ client }} {{ oc_action }} \
       {{ target_namespace }} \
       -f - \
       {{ (oc_action | regex_search('delete')) | ternary(' --ignore-not-found', '') }} \
       {{ (client == 'kubectl' and not (oc_action | regex_search('delete|patch'))) | ternary(' --validate=false', '') }} \
       {{ flags }}
  register: command_result
  no_log: "{{ no_log }}"
  failed_when:
    - command_result.rc != 0
    - "'AlreadyExists' not in command_result.stderr"
